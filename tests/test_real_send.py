# tests/test_real_send.py

import pytest
from dotenv import load_dotenv
import os

# Importe a classe que voc√™ quer testar
from captcha.evolution import EvolutionAPI

# Carrega as vari√°veis de ambiente do seu arquivo .env
load_dotenv()


# @pytest.mark.skip(reason="Este √© um teste de integra√ß√£o que envia uma mensagem real. Descomente para rodar.")
def test_send_real_whatsapp_message():
    """
    Tenta enviar uma mensagem de WhatsApp real usando as configura√ß√µes do .env.

    ATEN√á√ÉO: Este teste depende que a API da Evolution esteja rodando e
    configurada corretamente. Ele ENVIAR√Å uma mensagem de verdade.
    """
    # 1. Busca o n√∫mero do destinat√°rio do ambiente
    recipient_phone = os.getenv('WHATSAPP_RECIPIENT_PHONE')

    # Valida√ß√£o inicial para garantir que as vari√°veis foram carregadas
    assert recipient_phone, "A vari√°vel WHATSAPP_RECIPIENT_PHONE n√£o foi encontrada no .env"

    # 2. Instancia a classe da API (ela carregar√° as outras vari√°veis .env)
    try:
        api = EvolutionAPI()
    except ValueError as e:
        pytest.fail(f"Falha na inicializa√ß√£o da API: {e}. Verifique as vari√°veis no .env.")

    # 3. Monta e envia a mensagem de teste
    test_message = "üöÄ Mensagem de teste de integra√ß√£o autom√°tica! Se voc√™ recebeu isso, a API est√° funcionando."

    print(f"\nEnviando mensagem de teste para: {recipient_phone}")
    print(f"Usando inst√¢ncia: {api.INSTANCE_NAME} na URL: {api.BASE_URL}")

    response = api.send_text_message(number=recipient_phone, text=test_message)

    # 4. Verifica o resultado
    # A resposta n√£o deve ser nula
    assert response is not None, "A API n√£o retornou uma resposta. Verifique os logs do cont√™iner da Evolution API."

    # Uma resposta de sucesso geralmente cont√©m uma chave 'key' ou 'id'
    assert 'key' in response or 'id' in response, f"A resposta da API n√£o parece ser de sucesso. Resposta recebida: {response}"

    print(f"‚úÖ Teste de integra√ß√£o bem-sucedido! Resposta da API: {response}")