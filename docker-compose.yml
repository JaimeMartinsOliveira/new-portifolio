version: '3.8'

services:
  web:
    build: .
    container_name: portfolio_web
    restart: always
    env_file:
      - .env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    depends_on:
      - db
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000

  nginx:
    image: nginx:latest
    container_name: portfolio_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - web

  certbot:
    image: certbot/certbot
    container_name: portfolio_certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot

  db:
    image: postgres:15
    container_name: portfolio_db
    restart: always
    volumes:
      - portfolio_postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env

  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:v2.1.1
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - evolution_instances:/evolution/instances
    depends_on:
      - evolution_db
      - redis

  evolution_db:
    container_name: evo_postgres
    image: postgres:15
    restart: always
    command: ["postgres", "-c", "max_connections=1000"]
    env_file:
      - .env
    volumes:
      - evolution_postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  portfolio_postgres_data:
  evolution_postgres_data:
  static_volume:
  media_volume:
  evolution_instances:
  redis_data:
  certbot_conf:
  certbot_www:
